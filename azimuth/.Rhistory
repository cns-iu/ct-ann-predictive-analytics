requireNamespace("rlog", quietly = TRUE)
rlog
(!requireNamespace("rlog", quietly = TRUE))
if (!requireNamespace("rlog", quietly = TRUE)) {
install.packages("rlog")
}
rlog(getwd())
library(rlog)
rlog(getwd())
rlog::log_info(getwd())
library(logr)
install.packages("logr")
library(logr)
# Initialize all args
log_open("logs/azimuth.log")
# Print text to the log
log_print("Here is a test log statement")
# Print a df to the log
log_print(mtcars)
# Initialize all args
log_open("logs/azimuth.log")
# Print text to the log
log_print(rlog::log_info("Here is a test log statement"))
rlog::log_info("Here is a test log statement")
# Print text to the log
typeof(rlog::log_info("Here is a test log statement"))
?rlog::log_info
Sys.time()
print_logs <- function(msg){
log_print(paste0(Sys.time(), " : ", msg))
}
# Initialize all args
log_open("logs/azimuth.log")
print_logs("Initializing arguments")
# Close the log file
log_close()
rm(list = ls(all.names = TRUE))
library(Seurat)
library(Azimuth)
library(SeuratData)
library(patchwork)
library(logr)
LOGS_DIRECTORY <- "logs"
log_open(paste0(LOGS_DIRECTORY, "/azimuth.log"))
print_logs <- function(msg){
log_print(paste0(Sys.time(), " : ", msg))
}
# Remove all objects in current R Workspace
args <- commandArgs(trailingOnly = TRUE)
args <- as.list(strsplit(args, " ")[[1]])
print_logs(args)
# Initialize all args
print_logs("Initializing arguments")
log_open(paste0(LOGS_DIRECTORY, "/azimuth.log"))
# Initialize all args
print_logs("Initializing arguments")
format(Sys.time(), "%S")
format(Sys.time(), "%S")
format(Sys.time(), "%S")
format(Sys.time(), "%S")
format(Sys.time(), "%S")
format(Sys.time(), "%Y%M%D%H")
format(Sys.time(), "%Y%M%D%h")
format(Sys.time(), "%Y%M%D%H")
format(Sys.time(), "%Y%M%D%HH")
format(Sys.time(), "%Y%M%D")
format(Sys.time(), "%X")
format(Sys.time(), "%Y%M")
format(Sys.time(), "%Y%M%D")
format(Sys.time(), "%Y%M%d")
format(Sys.time(), "%Y%M%d%H")
CURR_TIMESTAMP <- format(Sys.time(), "%Y%M%d%H")
LOG_FILENAME <- paste0("azimuth", CURR_TIMESTAMP, ".log")
LOGS_DIRECTORY <- "logs"
CURR_TIMESTAMP <- format(Sys.time(), "%Y%M%d%H")
LOG_FILENAME <- paste0("azimuth_preds_", CURR_TIMESTAMP, ".log")
log_open(paste0(LOGS_DIRECTORY, "/", LOG_FILENAME))
print_logs <- function(msg){
log_print(paste0(Sys.time(), " : ", msg))
}
start <- Sys.time()
# Initialize all args
print_logs("Initializing arguments")
paste0(LOGS_DIRECTORY, "/", LOG_FILENAME)
paste0(LOGS_DIRECTORY, "/", LOG_FILENAME)
log_open(paste0(LOGS_DIRECTORY, "/", LOG_FILENAME))
# Close the log file
log_close()
rm(list = ls(all.names = TRUE))
library(Seurat)
print('loaded Seurat')
library(Azimuth)
print('loaded Azimuth')
library(SeuratData)
print('loaded SeuratData')
library(patchwork)
print('loaded patchwork')
library(logr)
LOGS_DIRECTORY <- "logs"
CURR_TIMESTAMP <- format(Sys.time(), "%Y%M%d%H")
LOG_FILENAME <- paste0("azimuth_preds_", CURR_TIMESTAMP, ".log")
log_open(paste0(LOGS_DIRECTORY, "/", LOG_FILENAME))
print_logs <- function(msg){
log_print(paste0(Sys.time(), " : ", msg))
}
start <- Sys.time()
?RunAzimuth
rlog::log_info(getwd())
print_logs(getwd())
ABS_DATASET_PATH <- paste0("../Datasets/TS_Lung/TS_Lung.h5ad")
query_adata <- LoadFileInput(path = ABS_DATASET_PATH)
lung_results <- RunAzimuth(query_adata, reference="reference")
rm(list = ls(all.names = TRUE))
library(Seurat)
print('loaded Seurat')
library(Azimuth)
print('loaded Azimuth')
library(SeuratData)
print('loaded SeuratData')
library(patchwork)
print('loaded patchwork')
library(logr)
print('loaded logr')
ANNDATA_FOLDER <- "datasets"
QUERY_DATASET_NAME <- "TS_Lung"
REFERENCE <- "lungref"
ABS_DATASET_PATH <- paste0(ANNDATA_FOLDER, "/", QUERY_DATASET_NAME, "/", QUERY_DATASET_NAME,".h5ad")
query_adata <- LoadFileInput(path = ABS_DATASET_PATH)
ANNDATA_FOLDER <- "../datasets"
ABS_DATASET_PATH <- paste0(ANNDATA_FOLDER, "/", QUERY_DATASET_NAME, "/", QUERY_DATASET_NAME,".h5ad")
query_adata <- LoadFileInput(path = ABS_DATASET_PATH)
lung_results <- RunAzimuth(query_adata, reference=REFERENCE)
key_value_pairs <- list(
c("predicted.ann_level_1", "predicted.ann_level_1"),
c("predicted.ann_level_1.score", "predicted.ann_level_1.score"),
c("predicted.ann_level_2", "predicted.ann_level_2"),
c("predicted.ann_level_2.score", "predicted.ann_level_2.score"),
c("predicted.ann_level_3" , "predicted.ann_level_3"),
c("predicted.ann_level_3.score" , "predicted.ann_level_3.score"),
c("predicted.ann_level_4" , "predicted.ann_level_4"),
c("predicted.ann_level_4.score" , "predicted.ann_level_4.score"),
c("predicted.ann_level_5" , "predicted.ann_level_5"),
c("predicted.ann_level_5.score" , "predicted.ann_level_5.score"),
c("predicted.ann_finest_level" , "predicted.ann_finest_level"),
c("predicted.ann_finest_level.score" , "predicted.ann_finest_level.score")
)
key_value_pairs
key_value_pairs[[1]]
sapply(key_value_pairs,"[[",1)
colnames <- sapply(key_value_pairs,"[[",1)
df <- create_new_df(colnames)
df <- create_new_df(colnames)
create_new_df <- function(colnames){
tryCatch({
data.frame(matrix(ncol=length(colnames), nrow=0, dimnames=list(NULL,colnames)))
},
error=function(e){
cat('\nSomething went wrong while creating a new Dataframe for:',colnames)
print(e)
})
}
colnames <- sapply(key_value_pairs,"[[",1)
df <- create_new_df(colnames)
df
lung_results[old_name]
key_value_pairs
lung_results %>%
select(predicted.ann_level_1)
library(dplyr)
lung_results %>%
select(predicted.ann_level_1)
lung_results['predicted.ann_level_1']
library(dplyr)
old_name <- 'predicted.ann_level_1'
new_name <- 'predicted.ann_level_1'
lung_results[old_name]
lung_results$old_name
lung_results
lung_results[[old_name]]
azimuth_preds <- data.frame(
predicted.ann_level_1 = lung_results$predicted.ann_level_1,
predicted.ann_level_1.score = lung_results$predicted.ann_level_1.score,
predicted.ann_level_2 = lung_results$predicted.ann_level_2,
predicted.ann_level_2.score = lung_results$predicted.ann_level_2.score,
predicted.ann_level_3 = lung_results$predicted.ann_level_3,
predicted.ann_level_3.score = lung_results$predicted.ann_level_3.score,
predicted.ann_level_4 = lung_results$predicted.ann_level_4,
predicted.ann_level_4.score = lung_results$predicted.ann_level_4.score,
predicted.ann_level_5 = lung_results$predicted.ann_level_5,
predicted.ann_level_5.score = lung_results$predicted.ann_level_5.score,
predicted.ann_finest_level = lung_results$predicted.ann_finest_level,
predicted.ann_finest_level.score = lung_results$predicted.ann_finest_level.score
)
for (pair in key_value_pairs) {
old_name <- pair[1]
new_name <- pair[2]
df[new_name] <- lung_results[[old_name]]
}
df
df <- create_new_df(colnames)
for (pair in key_value_pairs) {
old_name <- pair[1]
new_name <- pair[2]
df[new_name] = lung_results[[old_name]]
}
df
new_name
lung_results[[old_name]]
df[new_name] <- lung_results[[old_name]]
df
df[new_name] <- as.vector(lung_results[[old_name]])
df
lung_results[[old_name]]
old_name
as.vector(lung_results[[old_name]])
df[new_name] <- as.vector(lung_results[[old_name]])
colnames <- sapply(key_value_pairs,"[[",1)
df <- create_new_df(colnames)
for (pair in key_value_pairs) {
old_name <- pair[1]
new_name <- pair[2]
df[new_name] <- as.vector(lung_results[[old_name]])
}
df
len(lung_results)
nrows(lung_results)
nrow(lung_results)
create_new_df <- function(colnames, nrows){
tryCatch({
data.frame(matrix(ncol=length(colnames), nrow=nrows, dimnames=list(NULL,colnames)))
},
error=function(e){
cat('\nSomething went wrong while creating a new Dataframe for:',colnames)
print(e)
})
}
colnames <- sapply(key_value_pairs,"[[",1)
df <- create_new_df(colnames, nrow(lung_results))
for (pair in key_value_pairs) {
old_name <- pair[1]
new_name <- pair[2]
df[new_name] <- as.vector(lung_results[[old_name]])
}
df
for (pair in key_value_pairs) {
old_name <- pair[1]
new_name <- pair[2]
values <- as.vector(lung_results[[old_name]])
print(length(values))
df[new_name] <- values
}
for (pair in key_value_pairs) {
old_name <- pair[1]
new_name <- pair[2]
values <- as.vector(lung_results[[old_name]])
print(length(values))
print(values)
df[new_name] <- values
}
for (pair in key_value_pairs) {
old_name <- pair[1]
new_name <- pair[2]
values <- as.vector(lung_results[[old_name]])
print(length(values))
print(values)
df[[new_name]] <- values
}
df
for (pair in key_value_pairs) {
old_name <- pair[1]
new_name <- pair[2]
values <- as.vector(lung_results[[old_name]])
print(length(values))
print(values)
df[new_name] <- values
}
value_pairs) {
old_name <- pair[1]
new_name <- pair[2]
values <- as.vector(lung_results[[old_name]])
print(length(values))
print(values)
df[new_name] = values
}
for (pair in key_value_pairs) {
old_name <- pair[1]
new_name <- pair[2]
values <- as.vector(lung_results[[old_name]])
print(length(values))
print(values)
df[new_name] = values
}
df
colnames <- sapply(key_value_pairs,"[[",1)
df <- create_new_df(colnames, nrow(lung_results))
for (pair in key_value_pairs) {
old_name <- pair[1]
new_name <- pair[2]
values <- as.vector(lung_results[[old_name]])
print(length(values))
print(values)
df[new_name] = values
}
print(values)
df[new_name]
df[new_name] = values
df[new_name]
df[new_name] = values
nrow(values)
typeof(values)
unlist(values)
as.vector(unlist(values))
values <- as.vector(unlist(lung_results[[old_name]]))
print(length(values))
print(values)
df[new_name] = values
nrow(lung_results)
df <- create_new_df(colnames, nrow(lung_results))
for (pair in key_value_pairs) {
old_name <- pair[1]
new_name <- pair[2]
values <- as.vector(unlist(lung_results[[old_name]]))
print(length(values))
print(values)
df[new_name] = values
}
print(length(values))
lung_results[[old_name]]
unlist(lung_results[[old_name]])
as.vector(unlist(lung_results[[old_name]]))
values <- as.vector(unlist(lung_results[[old_name]]))
print(length(values))
colnames[1]
df <- create_new_df(colnames, nrow(lung_results[[colnames[1]]]))
for (pair in key_value_pairs) {
old_name <- pair[1]
new_name <- pair[2]
values <- as.vector(unlist(lung_results[[old_name]]))
print(length(values))
print(values)
df[new_name] = values
}
colnames <- sapply(key_value_pairs,"[[",1)
df <- create_new_df(colnames, nrow(lung_results[[colnames[1]]]))
for (pair in key_value_pairs) {
old_name <- pair[1]
new_name <- pair[2]
df[new_name] <- as.vector(unlist(lung_results[[old_name]]))
}
df
query_adata
lung_results
ncol(lung_results)
rm(list = ls(all.names = TRUE))
library(Seurat)
print('loaded Seurat')
library(Azimuth)
print('loaded Azimuth')
library(SeuratData)
print('loaded SeuratData')
library(patchwork)
print('loaded patchwork')
library(logr)
print('loaded logr')
ANNDATA_FOLDER <- "../datasets"
QUERY_DATASET_NAME <- "TS_Lung"
REFERENCE <- "lungref"
ABS_DATASET_PATH <- paste0(ANNDATA_FOLDER, "/", QUERY_DATASET_NAME, "/", QUERY_DATASET_NAME,".h5ad")
query_adata <- LoadFileInput(path = ABS_DATASET_PATH)
lung_results <- RunAzimuth(query_adata, reference=REFERENCE)
config_file <- 'config.csv'
key_value_pairs <- read.csv(config_file, stringsAsFactors = FALSE)
old_vs_new_colname_pairs <- read.csv(config_file, stringsAsFactors = FALSE)
create_new_df <- function(colnames, nrows){
tryCatch({
data.frame(matrix(ncol=length(colnames), nrow=nrows, dimnames=list(NULL,colnames)))
},
error=function(e){
cat('\nSomething went wrong while creating a new Dataframe for:',colnames)
print(e)
})
}
old_vs_new_colname_pairs
old_vs_new_colname_pairs[old_vs_new_colname_pairs['organ_reference']==REFERENCE]
old_vs_new_colname_pairs[[old_vs_new_colname_pairs['organ_reference']==REFERENCE]]
old_vs_new_colname_pairs[old_vs_new_colname_pairs['organ_reference']==REFERENCE]
subset(old_vs_new_colname_pairs, organ_reference==REFERENCE)
old_vs_new_colname_pairs <- subset(old_vs_new_colname_pairs, organ_reference==REFERENCE)
rm(list = ls(all.names = TRUE))
library(Seurat)
print('loaded Seurat')
library(Azimuth)
print('loaded Azimuth')
library(SeuratData)
print('loaded SeuratData')
library(patchwork)
print('loaded patchwork')
library(logr)
print('loaded logr')
ANNDATA_FOLDER <- "datasets"
QUERY_DATASET_NAME <- "TS_Lung"
# OUTPUT_PREDICTIONS_FILE <- "azimuth_preds.tsv"/
REFERENCE <- "lungref"
ABS_DATASET_PATH <- paste0(ANNDATA_FOLDER, "/", QUERY_DATASET_NAME, "/", QUERY_DATASET_NAME,".h5ad")
query_adata <- LoadFileInput(path = ABS_DATASET_PATH)
ANNDATA_FOLDER <- "../datasets"
QUERY_DATASET_NAME <- "TS_Lung"
# OUTPUT_PREDICTIONS_FILE <- "azimuth_preds.tsv"/
REFERENCE <- "lungref"
ABS_DATASET_PATH <- paste0(ANNDATA_FOLDER, "/", QUERY_DATASET_NAME, "/", QUERY_DATASET_NAME,".h5ad")
query_adata <- LoadFileInput(path = ABS_DATASET_PATH)
options(timeout=360)
??RunAzimuth
# "adiposeref", "bonemarrowref", "fetusref", "heartref",
# "humancortexref", "kidneyref", "lungref", "mousecortexref",
# "pancreasref", "pbmcref", "tonsilref"
results <- RunAzimuth(query_adata, reference='adiposeref')
results
colnames(results)
rownames(results)
results
ANNDATA_FOLDER <- "../datasets"
QUERY_DATASET_NAME <- "LCA_Smart_seq2"
# OUTPUT_PREDICTIONS_FILE <- "azimuth_preds.tsv"/
REFERENCE <- "lungref"
ABS_DATASET_PATH <- paste0(ANNDATA_FOLDER, "/", QUERY_DATASET_NAME, "/", QUERY_DATASET_NAME,".h5ad")
query_adata <- LoadFileInput(path = ABS_DATASET_PATH)
results <- RunAzimuth(query_adata, reference='bonemarrowref')
results
results <- RunAzimuth(query_adata, reference='heartref')
results
results <- RunAzimuth(query_adata, reference='kidneyref')
